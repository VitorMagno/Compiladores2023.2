# Generated from BigT.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,264,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,4,13,134,8,13,11,13,12,
        13,135,1,13,1,13,1,14,1,14,5,14,142,8,14,10,14,12,14,145,9,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,
        18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
        23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,4,28,183,8,28,11,
        28,12,28,184,1,29,4,29,188,8,29,11,29,12,29,189,1,30,4,30,193,8,
        30,11,30,12,30,194,1,30,5,30,198,8,30,10,30,12,30,201,9,30,1,30,
        5,30,204,8,30,10,30,12,30,207,9,30,3,30,209,8,30,1,30,3,30,212,8,
        30,1,31,1,31,1,32,4,32,217,8,32,11,32,12,32,218,1,32,5,32,222,8,
        32,10,32,12,32,225,9,32,1,32,5,32,228,8,32,10,32,12,32,231,9,32,
        3,32,233,8,32,1,33,4,33,236,8,33,11,33,12,33,237,1,33,5,33,241,8,
        33,10,33,12,33,244,9,33,1,33,5,33,247,8,33,10,33,12,33,250,9,33,
        3,33,252,8,33,1,34,4,34,255,8,34,11,34,12,34,256,1,35,1,35,1,36,
        1,36,1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,9,3,0,9,10,13,13,32,32,
        1,0,97,122,3,0,65,90,95,95,97,122,1,0,48,57,2,0,65,90,97,122,4,0,
        65,65,67,67,72,72,78,78,2,0,10,10,13,13,3,0,69,69,81,81,83,83,3,
        0,65,65,80,80,82,82,281,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,
        1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,89,1,0,0,0,11,92,
        1,0,0,0,13,94,1,0,0,0,15,96,1,0,0,0,17,101,1,0,0,0,19,107,1,0,0,
        0,21,109,1,0,0,0,23,114,1,0,0,0,25,123,1,0,0,0,27,133,1,0,0,0,29,
        139,1,0,0,0,31,150,1,0,0,0,33,153,1,0,0,0,35,156,1,0,0,0,37,158,
        1,0,0,0,39,161,1,0,0,0,41,164,1,0,0,0,43,167,1,0,0,0,45,169,1,0,
        0,0,47,171,1,0,0,0,49,173,1,0,0,0,51,175,1,0,0,0,53,177,1,0,0,0,
        55,179,1,0,0,0,57,182,1,0,0,0,59,187,1,0,0,0,61,211,1,0,0,0,63,213,
        1,0,0,0,65,216,1,0,0,0,67,235,1,0,0,0,69,254,1,0,0,0,71,258,1,0,
        0,0,73,260,1,0,0,0,75,262,1,0,0,0,77,78,5,83,0,0,78,79,5,69,0,0,
        79,80,5,81,0,0,80,2,1,0,0,0,81,82,5,123,0,0,82,4,1,0,0,0,83,84,5,
        125,0,0,84,6,1,0,0,0,85,86,5,80,0,0,86,87,5,65,0,0,87,88,5,82,0,
        0,88,8,1,0,0,0,89,90,5,105,0,0,90,91,5,102,0,0,91,10,1,0,0,0,92,
        93,5,40,0,0,93,12,1,0,0,0,94,95,5,41,0,0,95,14,1,0,0,0,96,97,5,101,
        0,0,97,98,5,108,0,0,98,99,5,115,0,0,99,100,5,101,0,0,100,16,1,0,
        0,0,101,102,5,119,0,0,102,103,5,104,0,0,103,104,5,105,0,0,104,105,
        5,108,0,0,105,106,5,101,0,0,106,18,1,0,0,0,107,108,5,61,0,0,108,
        20,1,0,0,0,109,110,5,67,0,0,110,111,5,72,0,0,111,112,5,65,0,0,112,
        113,5,78,0,0,113,22,1,0,0,0,114,115,5,105,0,0,115,116,5,100,0,0,
        116,117,5,95,0,0,117,118,5,99,0,0,118,119,5,111,0,0,119,120,5,109,
        0,0,120,121,5,112,0,0,121,122,5,49,0,0,122,24,1,0,0,0,123,124,5,
        105,0,0,124,125,5,100,0,0,125,126,5,95,0,0,126,127,5,99,0,0,127,
        128,5,111,0,0,128,129,5,109,0,0,129,130,5,112,0,0,130,131,5,50,0,
        0,131,26,1,0,0,0,132,134,7,0,0,0,133,132,1,0,0,0,134,135,1,0,0,0,
        135,133,1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,6,13,0,0,
        138,28,1,0,0,0,139,143,5,35,0,0,140,142,3,55,27,0,141,140,1,0,0,
        0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,
        0,145,143,1,0,0,0,146,147,3,69,34,0,147,148,1,0,0,0,148,149,6,14,
        1,0,149,30,1,0,0,0,150,151,5,38,0,0,151,152,5,38,0,0,152,32,1,0,
        0,0,153,154,5,124,0,0,154,155,5,124,0,0,155,34,1,0,0,0,156,157,5,
        33,0,0,157,36,1,0,0,0,158,159,5,62,0,0,159,160,5,61,0,0,160,38,1,
        0,0,0,161,162,5,60,0,0,162,163,5,61,0,0,163,40,1,0,0,0,164,165,5,
        61,0,0,165,166,5,61,0,0,166,42,1,0,0,0,167,168,5,60,0,0,168,44,1,
        0,0,0,169,170,5,62,0,0,170,46,1,0,0,0,171,172,5,42,0,0,172,48,1,
        0,0,0,173,174,5,47,0,0,174,50,1,0,0,0,175,176,5,43,0,0,176,52,1,
        0,0,0,177,178,5,45,0,0,178,54,1,0,0,0,179,180,7,1,0,0,180,56,1,0,
        0,0,181,183,7,2,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,
        0,0,184,185,1,0,0,0,185,58,1,0,0,0,186,188,7,3,0,0,187,186,1,0,0,
        0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,60,1,0,0,0,
        191,193,3,55,27,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,
        0,194,195,1,0,0,0,195,208,1,0,0,0,196,198,7,3,0,0,197,196,1,0,0,
        0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,209,1,0,0,
        0,201,199,1,0,0,0,202,204,7,4,0,0,203,202,1,0,0,0,204,207,1,0,0,
        0,205,203,1,0,0,0,205,206,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,
        0,208,199,1,0,0,0,208,205,1,0,0,0,209,212,1,0,0,0,210,212,3,59,29,
        0,211,192,1,0,0,0,211,210,1,0,0,0,212,62,1,0,0,0,213,214,7,5,0,0,
        214,64,1,0,0,0,215,217,3,55,27,0,216,215,1,0,0,0,217,218,1,0,0,0,
        218,216,1,0,0,0,218,219,1,0,0,0,219,232,1,0,0,0,220,222,7,3,0,0,
        221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,
        224,233,1,0,0,0,225,223,1,0,0,0,226,228,7,4,0,0,227,226,1,0,0,0,
        228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,233,1,0,0,0,
        231,229,1,0,0,0,232,223,1,0,0,0,232,229,1,0,0,0,233,66,1,0,0,0,234,
        236,3,55,27,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,
        238,1,0,0,0,238,251,1,0,0,0,239,241,7,3,0,0,240,239,1,0,0,0,241,
        244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,252,1,0,0,0,244,
        242,1,0,0,0,245,247,7,4,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,
        246,1,0,0,0,248,249,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,251,
        242,1,0,0,0,251,248,1,0,0,0,252,68,1,0,0,0,253,255,7,6,0,0,254,253,
        1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,70,1,
        0,0,0,258,259,5,59,0,0,259,72,1,0,0,0,260,261,7,7,0,0,261,74,1,0,
        0,0,262,263,7,8,0,0,263,76,1,0,0,0,19,0,135,143,184,189,194,199,
        205,208,211,218,223,229,232,237,242,248,251,256,2,6,0,0,0,1,0
    ]

class BigTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    WS = 14
    COMMENT = 15
    AND = 16
    OR = 17
    NOT = 18
    GE = 19
    LE = 20
    EQ = 21
    LT = 22
    GT = 23
    MUL = 24
    DIV = 25
    ADD = 26
    SUB = 27
    CHAR = 28
    ID = 29
    INT = 30
    DIGIT = 31
    CHAN = 32
    ID_COMP1 = 33
    ID_COMP2 = 34
    NEWLINE = 35
    ENDLINE = 36
    SEQ = 37
    PAR = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'SEQ'", "'{'", "'}'", "'PAR'", "'if'", "'('", "')'", "'else'", 
            "'while'", "'='", "'CHAN'", "'id_comp1'", "'id_comp2'", "'&&'", 
            "'||'", "'!'", "'>='", "'<='", "'=='", "'<'", "'>'", "'*'", 
            "'/'", "'+'", "'-'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "AND", "OR", "NOT", "GE", "LE", "EQ", "LT", 
            "GT", "MUL", "DIV", "ADD", "SUB", "CHAR", "ID", "INT", "DIGIT", 
            "CHAN", "ID_COMP1", "ID_COMP2", "NEWLINE", "ENDLINE", "SEQ", 
            "PAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "WS", 
                  "COMMENT", "AND", "OR", "NOT", "GE", "LE", "EQ", "LT", 
                  "GT", "MUL", "DIV", "ADD", "SUB", "CHAR", "ID", "INT", 
                  "DIGIT", "CHAN", "ID_COMP1", "ID_COMP2", "NEWLINE", "ENDLINE", 
                  "SEQ", "PAR" ]

    grammarFileName = "BigT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


