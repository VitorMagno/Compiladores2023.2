# Generated from BigT.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,233,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
        1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        4,19,112,8,19,11,19,12,19,113,1,19,5,19,117,8,19,10,19,12,19,120,
        9,19,1,19,5,19,123,8,19,10,19,12,19,126,9,19,3,19,128,8,19,1,20,
        4,20,131,8,20,11,20,12,20,132,1,20,5,20,136,8,20,10,20,12,20,139,
        9,20,1,20,5,20,142,8,20,10,20,12,20,145,9,20,3,20,147,8,20,1,20,
        3,20,150,8,20,1,21,4,21,153,8,21,11,21,12,21,154,1,21,5,21,158,8,
        21,10,21,12,21,161,9,21,1,21,5,21,164,8,21,10,21,12,21,167,9,21,
        3,21,169,8,21,1,22,4,22,172,8,22,11,22,12,22,173,1,22,5,22,177,8,
        22,10,22,12,22,180,9,22,1,22,5,22,183,8,22,10,22,12,22,186,9,22,
        3,22,188,8,22,1,23,4,23,191,8,23,11,23,12,23,192,1,23,5,23,196,8,
        23,10,23,12,23,199,9,23,1,23,5,23,202,8,23,10,23,12,23,205,9,23,
        3,23,207,8,23,1,24,3,24,210,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
        26,1,26,1,26,1,26,1,27,4,27,223,8,27,11,27,12,27,224,1,28,4,28,228,
        8,28,11,28,12,28,229,1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        1,0,3,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,256,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,5,63,
        1,0,0,0,7,65,1,0,0,0,9,68,1,0,0,0,11,73,1,0,0,0,13,79,1,0,0,0,15,
        82,1,0,0,0,17,85,1,0,0,0,19,87,1,0,0,0,21,90,1,0,0,0,23,93,1,0,0,
        0,25,96,1,0,0,0,27,98,1,0,0,0,29,100,1,0,0,0,31,102,1,0,0,0,33,104,
        1,0,0,0,35,106,1,0,0,0,37,108,1,0,0,0,39,111,1,0,0,0,41,149,1,0,
        0,0,43,152,1,0,0,0,45,171,1,0,0,0,47,190,1,0,0,0,49,209,1,0,0,0,
        51,213,1,0,0,0,53,217,1,0,0,0,55,222,1,0,0,0,57,227,1,0,0,0,59,60,
        5,40,0,0,60,2,1,0,0,0,61,62,5,41,0,0,62,4,1,0,0,0,63,64,5,61,0,0,
        64,6,1,0,0,0,65,66,5,73,0,0,66,67,5,70,0,0,67,8,1,0,0,0,68,69,5,
        69,0,0,69,70,5,76,0,0,70,71,5,83,0,0,71,72,5,69,0,0,72,10,1,0,0,
        0,73,74,5,87,0,0,74,75,5,72,0,0,75,76,5,73,0,0,76,77,5,76,0,0,77,
        78,5,69,0,0,78,12,1,0,0,0,79,80,5,38,0,0,80,81,5,38,0,0,81,14,1,
        0,0,0,82,83,5,124,0,0,83,84,5,124,0,0,84,16,1,0,0,0,85,86,5,33,0,
        0,86,18,1,0,0,0,87,88,5,62,0,0,88,89,5,61,0,0,89,20,1,0,0,0,90,91,
        5,60,0,0,91,92,5,61,0,0,92,22,1,0,0,0,93,94,5,61,0,0,94,95,5,61,
        0,0,95,24,1,0,0,0,96,97,5,60,0,0,97,26,1,0,0,0,98,99,5,62,0,0,99,
        28,1,0,0,0,100,101,5,42,0,0,101,30,1,0,0,0,102,103,5,47,0,0,103,
        32,1,0,0,0,104,105,5,43,0,0,105,34,1,0,0,0,106,107,5,45,0,0,107,
        36,1,0,0,0,108,109,7,0,0,0,109,38,1,0,0,0,110,112,3,37,18,0,111,
        110,1,0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,
        127,1,0,0,0,115,117,7,1,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,
        116,1,0,0,0,118,119,1,0,0,0,119,128,1,0,0,0,120,118,1,0,0,0,121,
        123,7,0,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,
        125,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,127,118,1,0,0,0,127,
        124,1,0,0,0,128,40,1,0,0,0,129,131,3,37,18,0,130,129,1,0,0,0,131,
        132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,146,1,0,0,0,134,
        136,7,1,0,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,
        138,1,0,0,0,138,147,1,0,0,0,139,137,1,0,0,0,140,142,7,0,0,0,141,
        140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
        147,1,0,0,0,145,143,1,0,0,0,146,137,1,0,0,0,146,143,1,0,0,0,147,
        150,1,0,0,0,148,150,3,55,27,0,149,130,1,0,0,0,149,148,1,0,0,0,150,
        42,1,0,0,0,151,153,3,37,18,0,152,151,1,0,0,0,153,154,1,0,0,0,154,
        152,1,0,0,0,154,155,1,0,0,0,155,168,1,0,0,0,156,158,7,1,0,0,157,
        156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,
        169,1,0,0,0,161,159,1,0,0,0,162,164,7,0,0,0,163,162,1,0,0,0,164,
        167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,169,1,0,0,0,167,
        165,1,0,0,0,168,159,1,0,0,0,168,165,1,0,0,0,169,44,1,0,0,0,170,172,
        3,37,18,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,
        1,0,0,0,174,187,1,0,0,0,175,177,7,1,0,0,176,175,1,0,0,0,177,180,
        1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,188,1,0,0,0,180,178,
        1,0,0,0,181,183,7,0,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,
        1,0,0,0,184,185,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,187,178,
        1,0,0,0,187,184,1,0,0,0,188,46,1,0,0,0,189,191,3,37,18,0,190,189,
        1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,206,
        1,0,0,0,194,196,7,1,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,
        1,0,0,0,197,198,1,0,0,0,198,207,1,0,0,0,199,197,1,0,0,0,200,202,
        7,0,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,
        1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,206,197,1,0,0,0,206,203,
        1,0,0,0,207,48,1,0,0,0,208,210,5,13,0,0,209,208,1,0,0,0,209,210,
        1,0,0,0,210,211,1,0,0,0,211,212,5,10,0,0,212,50,1,0,0,0,213,214,
        5,83,0,0,214,215,5,69,0,0,215,216,5,81,0,0,216,52,1,0,0,0,217,218,
        5,80,0,0,218,219,5,65,0,0,219,220,5,82,0,0,220,54,1,0,0,0,221,223,
        7,1,0,0,222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,
        1,0,0,0,225,56,1,0,0,0,226,228,7,2,0,0,227,226,1,0,0,0,228,229,1,
        0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,6,
        28,0,0,232,58,1,0,0,0,25,0,113,118,124,127,132,137,143,146,149,154,
        159,165,168,173,178,184,187,192,197,203,206,209,224,229,1,6,0,0
    ]

class BigTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    IF = 4
    ELSE = 5
    WHILE = 6
    AND = 7
    OR = 8
    NOT = 9
    GE = 10
    LE = 11
    EQ = 12
    LT = 13
    GT = 14
    MUL = 15
    DIV = 16
    ADD = 17
    SUB = 18
    CHAR = 19
    ID = 20
    DIGIT = 21
    CHAN = 22
    ID_COMP1 = 23
    ID_COMP2 = 24
    NEWLINE = 25
    SEQ = 26
    PAR = 27
    INT = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'='", "'IF'", "'ELSE'", "'WHILE'", "'&&'", "'||'", 
            "'!'", "'>='", "'<='", "'=='", "'<'", "'>'", "'*'", "'/'", "'+'", 
            "'-'", "'SEQ'", "'PAR'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "AND", "OR", "NOT", "GE", "LE", "EQ", 
            "LT", "GT", "MUL", "DIV", "ADD", "SUB", "CHAR", "ID", "DIGIT", 
            "CHAN", "ID_COMP1", "ID_COMP2", "NEWLINE", "SEQ", "PAR", "INT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "IF", "ELSE", "WHILE", "AND", 
                  "OR", "NOT", "GE", "LE", "EQ", "LT", "GT", "MUL", "DIV", 
                  "ADD", "SUB", "CHAR", "ID", "DIGIT", "CHAN", "ID_COMP1", 
                  "ID_COMP2", "NEWLINE", "SEQ", "PAR", "INT", "WS" ]

    grammarFileName = "BigT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


