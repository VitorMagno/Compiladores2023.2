# Generated from BigT.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,251,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,4,24,159,8,24,11,24,12,24,160,1,25,4,
        25,164,8,25,11,25,12,25,165,1,26,4,26,169,8,26,11,26,12,26,170,1,
        26,5,26,174,8,26,10,26,12,26,177,9,26,1,26,5,26,180,8,26,10,26,12,
        26,183,9,26,3,26,185,8,26,1,26,3,26,188,8,26,1,27,1,27,1,28,4,28,
        193,8,28,11,28,12,28,194,1,28,5,28,198,8,28,10,28,12,28,201,9,28,
        1,28,5,28,204,8,28,10,28,12,28,207,9,28,3,28,209,8,28,1,29,4,29,
        212,8,29,11,29,12,29,213,1,29,5,29,217,8,29,10,29,12,29,220,9,29,
        1,29,5,29,223,8,29,10,29,12,29,226,9,29,3,29,228,8,29,1,30,3,30,
        231,8,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,4,33,240,8,33,11,33,
        12,33,241,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,0,0,37,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,1,0,7,2,0,65,90,97,122,1,0,48,57,4,0,65,65,67,67,72,72,78,78,
        3,0,69,69,81,81,83,83,3,0,65,65,80,80,82,82,2,0,9,9,32,32,2,0,8,
        8,32,32,267,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,79,1,0,0,0,5,83,
        1,0,0,0,7,86,1,0,0,0,9,88,1,0,0,0,11,90,1,0,0,0,13,95,1,0,0,0,15,
        101,1,0,0,0,17,103,1,0,0,0,19,108,1,0,0,0,21,117,1,0,0,0,23,126,
        1,0,0,0,25,129,1,0,0,0,27,132,1,0,0,0,29,134,1,0,0,0,31,137,1,0,
        0,0,33,140,1,0,0,0,35,143,1,0,0,0,37,145,1,0,0,0,39,147,1,0,0,0,
        41,149,1,0,0,0,43,151,1,0,0,0,45,153,1,0,0,0,47,155,1,0,0,0,49,158,
        1,0,0,0,51,163,1,0,0,0,53,187,1,0,0,0,55,189,1,0,0,0,57,192,1,0,
        0,0,59,211,1,0,0,0,61,230,1,0,0,0,63,234,1,0,0,0,65,236,1,0,0,0,
        67,239,1,0,0,0,69,243,1,0,0,0,71,245,1,0,0,0,73,247,1,0,0,0,75,76,
        5,83,0,0,76,77,5,69,0,0,77,78,5,81,0,0,78,2,1,0,0,0,79,80,5,80,0,
        0,80,81,5,65,0,0,81,82,5,82,0,0,82,4,1,0,0,0,83,84,5,105,0,0,84,
        85,5,102,0,0,85,6,1,0,0,0,86,87,5,40,0,0,87,8,1,0,0,0,88,89,5,41,
        0,0,89,10,1,0,0,0,90,91,5,101,0,0,91,92,5,108,0,0,92,93,5,115,0,
        0,93,94,5,101,0,0,94,12,1,0,0,0,95,96,5,119,0,0,96,97,5,104,0,0,
        97,98,5,105,0,0,98,99,5,108,0,0,99,100,5,101,0,0,100,14,1,0,0,0,
        101,102,5,61,0,0,102,16,1,0,0,0,103,104,5,67,0,0,104,105,5,72,0,
        0,105,106,5,65,0,0,106,107,5,78,0,0,107,18,1,0,0,0,108,109,5,105,
        0,0,109,110,5,100,0,0,110,111,5,95,0,0,111,112,5,99,0,0,112,113,
        5,111,0,0,113,114,5,109,0,0,114,115,5,112,0,0,115,116,5,49,0,0,116,
        20,1,0,0,0,117,118,5,105,0,0,118,119,5,100,0,0,119,120,5,95,0,0,
        120,121,5,99,0,0,121,122,5,111,0,0,122,123,5,109,0,0,123,124,5,112,
        0,0,124,125,5,50,0,0,125,22,1,0,0,0,126,127,5,38,0,0,127,128,5,38,
        0,0,128,24,1,0,0,0,129,130,5,124,0,0,130,131,5,124,0,0,131,26,1,
        0,0,0,132,133,5,33,0,0,133,28,1,0,0,0,134,135,5,62,0,0,135,136,5,
        61,0,0,136,30,1,0,0,0,137,138,5,60,0,0,138,139,5,61,0,0,139,32,1,
        0,0,0,140,141,5,61,0,0,141,142,5,61,0,0,142,34,1,0,0,0,143,144,5,
        60,0,0,144,36,1,0,0,0,145,146,5,62,0,0,146,38,1,0,0,0,147,148,5,
        42,0,0,148,40,1,0,0,0,149,150,5,47,0,0,150,42,1,0,0,0,151,152,5,
        43,0,0,152,44,1,0,0,0,153,154,5,45,0,0,154,46,1,0,0,0,155,156,7,
        0,0,0,156,48,1,0,0,0,157,159,7,0,0,0,158,157,1,0,0,0,159,160,1,0,
        0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,50,1,0,0,0,162,164,7,1,0,
        0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,
        0,166,52,1,0,0,0,167,169,3,47,23,0,168,167,1,0,0,0,169,170,1,0,0,
        0,170,168,1,0,0,0,170,171,1,0,0,0,171,184,1,0,0,0,172,174,7,1,0,
        0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,
        0,176,185,1,0,0,0,177,175,1,0,0,0,178,180,7,0,0,0,179,178,1,0,0,
        0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,185,1,0,0,
        0,183,181,1,0,0,0,184,175,1,0,0,0,184,181,1,0,0,0,185,188,1,0,0,
        0,186,188,3,51,25,0,187,168,1,0,0,0,187,186,1,0,0,0,188,54,1,0,0,
        0,189,190,7,2,0,0,190,56,1,0,0,0,191,193,3,47,23,0,192,191,1,0,0,
        0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,208,1,0,0,
        0,196,198,7,1,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,
        0,199,200,1,0,0,0,200,209,1,0,0,0,201,199,1,0,0,0,202,204,7,0,0,
        0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,
        0,206,209,1,0,0,0,207,205,1,0,0,0,208,199,1,0,0,0,208,205,1,0,0,
        0,209,58,1,0,0,0,210,212,3,47,23,0,211,210,1,0,0,0,212,213,1,0,0,
        0,213,211,1,0,0,0,213,214,1,0,0,0,214,227,1,0,0,0,215,217,7,1,0,
        0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,
        0,219,228,1,0,0,0,220,218,1,0,0,0,221,223,7,0,0,0,222,221,1,0,0,
        0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,228,1,0,0,
        0,226,224,1,0,0,0,227,218,1,0,0,0,227,224,1,0,0,0,228,60,1,0,0,0,
        229,231,5,13,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,
        232,233,5,10,0,0,233,62,1,0,0,0,234,235,7,3,0,0,235,64,1,0,0,0,236,
        237,7,4,0,0,237,66,1,0,0,0,238,240,7,5,0,0,239,238,1,0,0,0,240,241,
        1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,68,1,0,0,0,243,244,7,
        6,0,0,244,70,1,0,0,0,245,246,5,32,0,0,246,72,1,0,0,0,247,248,3,71,
        35,0,248,249,1,0,0,0,249,250,6,36,0,0,250,74,1,0,0,0,18,0,160,165,
        170,175,181,184,187,194,199,205,208,213,218,224,227,230,241,1,6,
        0,0
    ]

class BigTLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    AND = 12
    OR = 13
    NOT = 14
    GE = 15
    LE = 16
    EQ = 17
    LT = 18
    GT = 19
    MUL = 20
    DIV = 21
    ADD = 22
    SUB = 23
    CHAR = 24
    ID = 25
    INT = 26
    DIGIT = 27
    CHAN = 28
    ID_COMP1 = 29
    ID_COMP2 = 30
    NEWLINE = 31
    SEQ = 32
    PAR = 33
    ENTRATAB = 34
    CONTRATAB = 35
    SINGLE_SPACE = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'SEQ'", "'PAR'", "'if'", "'('", "')'", "'else'", "'while'", 
            "'='", "'CHAN'", "'id_comp1'", "'id_comp2'", "'&&'", "'||'", 
            "'!'", "'>='", "'<='", "'=='", "'<'", "'>'", "'*'", "'/'", "'+'", 
            "'-'", "' '" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "NOT", "GE", "LE", "EQ", "LT", "GT", "MUL", "DIV", 
            "ADD", "SUB", "CHAR", "ID", "INT", "DIGIT", "CHAN", "ID_COMP1", 
            "ID_COMP2", "NEWLINE", "SEQ", "PAR", "ENTRATAB", "CONTRATAB", 
            "SINGLE_SPACE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "AND", "OR", "NOT", "GE", 
                  "LE", "EQ", "LT", "GT", "MUL", "DIV", "ADD", "SUB", "CHAR", 
                  "ID", "INT", "DIGIT", "CHAN", "ID_COMP1", "ID_COMP2", 
                  "NEWLINE", "SEQ", "PAR", "ENTRATAB", "CONTRATAB", "SINGLE_SPACE", 
                  "WS" ]

    grammarFileName = "BigT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


